# -*- coding: utf-8 -*-
"""prueba data engineer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mszHxXqEcxC7JA61WobxBAbRIZMnm5uP
"""

# Librerias
import pandas as pd
import numpy as np
import datetime
import sqlite3

# Fecha de hoy
FECHA_ACTUAL = datetime.datetime.now()

# Función para el grupo de edades
def age_group(age):
  if age <= 20:
    return 1
  elif age <= 30:
    return 2
  elif age <= 40:
    return 3
  elif age <= 50:
    return 4
  elif age <= 60:
    return 5
  return 6

# Función para strings en mayúsculas
def to_upper_case(x):
  if type(x) != float:
    return x.upper()
  return x

#Obtenemos el path del archivo
path = input("Rutas del archivo: ")

# Leeamos el archivo
df = pd.read_csv(path, delimiter=';')

# Eliminamos columnas innecesarias
df.drop(columns=['altura', 'peso'], inplace=True)

# Nombre de columnas
columns = df.columns.values

# convertimos el texto en mayúsculas y valores numericos a enteros
for column in columns:
  if df[column].dtype == 'O':
    if column != 'correo':
      df[column] = df[column].apply(lambda x: to_upper_case(x))
  if df[column].dtype == np.float64:
    df[column] = df[column].astype('Int64')

# Transformamos y agregamos columnas restantes
# Transformamos a datetime
df['fecha_nacimiento'] = pd.to_datetime(df['fecha_nacimiento'])
df['fecha_vencimiento'] = pd.to_datetime(df['fecha_vencimiento'])

# Diferencia de fechas
delta_dates = (FECHA_ACTUAL - df['fecha_nacimiento'])

# agregamos columna age
df['age'] = delta_dates.apply(lambda x: int(x / np.timedelta64(1, 'Y')))

# agregamos columna age_group
df['age_group'] = df['age'].apply(lambda x: age_group(x))

# Agregamos columna delinquency
df['delinquency'] = (FECHA_ACTUAL - df['fecha_vencimiento']).apply(lambda x: x.days)

# Obtenemos la informacion para los archivos
columnas_customers = ['fiscal_id', 'first_name', 'last_name', 'gender', 'birth_date', 'age', 'age_group', 'due_date', 'delinquency', 'due_balance', 'address']
data_clientes = df[['fiscal_id', 'first_name', 'last_name', 'gender', 'fecha_nacimiento', 'age', 'age_group', 'fecha_vencimiento', 'delinquency', 'deuda', 'direccion']].values

columnas_emails = ['fiscal_id', 'email', 'status', 'priority']
data_emails = df[['fiscal_id', 'correo', 'estatus_contacto', 'prioridad']].values

columnas_phones = ['fiscal_id', 'phone', 'status', 'priority']
data_phones = df[['fiscal_id', 'telefono', 'estatus_contacto', 'prioridad']].values

# Creamos dataframes de cada una de las tablas
customers = pd.DataFrame(data=data_clientes, columns=columnas_customers)
emails = pd.DataFrame(data=data_emails, columns=columnas_emails)
phones = pd.DataFrame(data=data_phones, columns=columnas_phones)

# Guardamos las tablas
customers.to_excel('output/customers.xlsx')
emails.to_excel('output/emails.xlsx')
phones.to_excel('output/phones.xlsx')

# Conexion con base de datos
con = sqlite3.connect('database.db3')

# Cursor
cur = con.cursor()

# Borramos las tablas existentes
cur.execute("DROP TABLE IF EXISTS customers")
con.commit()
cur.execute("DROP TABLE IF EXISTS emails")
con.commit()
cur.execute("DROP TABLE IF EXISTS phones")
con.commit()

# Query para crear la tabla customers
crear_tabla_customers = f"""CREATE TABLE IF NOT EXISTS customers({columnas_customers[0]} VARCHAR(50),
                                                                {columnas_customers[1]} VARCHAR(50),
                                                                {columnas_customers[2]} VARCHAR(50),
                                                                {columnas_customers[3]} VARCHAR(10),
                                                                {columnas_customers[4]} DATE,
                                                                {columnas_customers[5]} INTEGER,
                                                                {columnas_customers[6]} INTEGER,
                                                                {columnas_customers[7]} DATE,
                                                                {columnas_customers[8]} INTEGER,
                                                                {columnas_customers[9]} INTEGER,
                                                                {columnas_customers[10]} VARCHAR(255))"""

# Ejecutamos y guardamos en la base de datos
cur.execute(crear_tabla_customers)
con.commit()

# Query para crear la tabla emails
crear_tabla_emails = f"""CREATE TABLE IF NOT EXISTS emails({columnas_emails[0]} VARCHAR(50),
                                                                {columnas_emails[1]} VARCHAR(100),
                                                                {columnas_emails[2]} VARCHAR(10),
                                                                {columnas_emails[3]} INTEGER)"""

# Ejecutamos y guardamos en la base de datos
cur.execute(crear_tabla_emails)
con.commit()

# Qyery para crear tabla phones
crear_tabla_phones = f"""CREATE TABLE IF NOT EXISTS phones({columnas_phones[0]} VARCHAR(50),
                                                                {columnas_phones[1]} INTEGER,
                                                                {columnas_phones[2]} VARCHAR(10),
                                                                {columnas_phones[3]} INTEGER)"""

# Ejecutamos y guardamos en la base de datos
cur.execute(crear_tabla_phones)
con.commit()

# Guardamos los datos en cada tabla
customers.to_sql('customers', con, if_exists='append', index=False)

emails.to_sql('emails', con, if_exists='append', index=False)

phones.to_sql('phones', con, if_exists='append', index=False)

con.close()

